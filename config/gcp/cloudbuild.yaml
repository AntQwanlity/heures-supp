steps:
  # Cancel previous builds
  - name: "gcr.io/cloud-builders/gcloud-slim:latest"
    entrypoint: "bash"
    args:
      [
        "heures-supp/config/gcp/cancelot.sh",
        "--current_build_id",
        "$BUILD_ID",
        "--branch_name",
        "$BRANCH_NAME",
        "--same_trigger_only",
        "--project",
        "$PROJECT_ID",
        "--region",
        "europe-west1",
      ]
    id: Cancel previous builds

  #  - name: 'gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.2-alpine'
  #    entrypoint: /bin/sh
  #    args:
  #      - -c
  #      - |
  #        mkdir /tmp/cloudsql
  #        chmod 777 /tmp/cloudsql
  #        /cloud-sql-proxy --unix-socket=/tmp/cloudsql ${_INSTANCE_CONNECTION_NAME} &

  # Build
  - name: gcr.io/cloud-builders/docker
    args:
      - build
      - "--no-cache"
      - "--network=cloudbuild"
      - "-t"
      - >-
        $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
      - "-f"
      - heures-supp/config/gcp/Dockerfile
      - heures-supp
    id: Build
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - >-
        $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    id: Push
  # Prepare migration
  #  - id: "Prepare DB migration"
  #    name: "gcr.io/cloud-builders/docker"
  #    entrypoint: /bin/bash
  #    args:
  #      - '-c'
  #      - |
  #        echo "FROM $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
  #        COPY --from=gcr.io/cloud-sql-connectors/cloud-sql-proxy /cloud-sql-proxy /cloudsql/cloud-sql-proxy" > Dockerfile-proxy;
  #
  #        docker build --network=cloudbuild -f Dockerfile-proxy -t $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA-proxy .
  #  # DB migration
  #  - id: "DB migration"
  #    name: "$_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA-proxy"
  #    dir: sql-proxy
  #    env:
  #      - "DATABASE_URL=postgresql://${_DB_USERNAME}:${_DB_PASSWORD}@$localhost:5432/${_DB_NAME}?host=${_DB_HOST}"
  #      - "INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}"
  #    secretEnv:
  #      - DB_NAME
  #      - DB_USERNAME
  #      - DB_PASSWORD
  #      - DB_HOST
  #    entrypoint: /bin/bash
  #    args:
  #      - '-c'
  #      - |
  #        /cloudsql/cloud-sql-proxy --unix-socket /cloudsql ${_INSTANCE_CONNECTION_NAME} & sleep 2;
  #        npx prisma migrate deploy
  # Deploy
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    args:
      - run
      - services
      - update
      - $_SERVICE_NAME
      - "--platform=managed"
      - "--image=$_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA"
      - >-
        --labels=commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID
      - "--region=$_DEPLOY_REGION"
      - "--quiet"
      - "--set-cloudsql-instances=$_INSTANCE_CONNECTION_NAME"
      - "--min-instances=1"
      - "--max-instances=3"
      - "--memory=1Gi"
      - "--cpu-boost"
      - "--service-account=$_SERVICE_ACCOUNT"
    id: Deploy
    entrypoint: gcloud
options:
  substitutionOption: ALLOW_LOOSE
  dynamic_substitutions: true
#availableSecrets:
#  secretManager:
#    - versionName: projects/$PROJECT_ID/secrets/db_name/versions/latest
#      env: DB_NAME
#    - versionName: projects/$PROJECT_ID/secrets/db_username/versions/latest
#      env: DB_USERNAME
#    - versionName: projects/$PROJECT_ID/secrets/db_password/versions/latest
#      env: DB_PASSWORD
#    - versionName: projects/$PROJECT_ID/secrets/db_host/versions/latest
#      env: DB_HOST
substitutions:
  REPO_NAME: heures-supp-prod
  _SERVICE_NAME: heures-supp-prod
  _DEPLOY_REGION: europe-west1
  _AR_HOSTNAME: europe-west1-docker.pkg.dev
  _INSTANCE_CONNECTION_NAME: heures-supp-prod:europe-west1:heures-supp-prod
  _SERVICE_ACCOUNT: heures-supp-prod-run@heures-supp-prod.iam.gserviceaccount.com
tags:
  - heures-supp-prod
